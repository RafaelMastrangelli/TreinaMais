@TreinaMaisHostAddress = http://localhost:5056
@CourseId = 1
@ReviewId = 1
@Token = your_jwt_token_here


### POST login
POST {{TreinaMaisHostAddress}}/api/auth/login
Content-Type: application/json
Accept: application/json

{
  "email": "usuario@exemplo.com",
  "password": "senha123"
}


### GET lista de cursos
GET {{TreinaMaisHostAddress}}/api/courses
Accept: application/json


### GET curso por ID
GET {{TreinaMaisHostAddress}}/api/courses/{{CourseId}}
Accept: application/json


### POST criar curso
POST {{TreinaMaisHostAddress}}/api/courses
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{Token}}


{
  "nomeCurso": "Curso de ASP.NET Core",
  "instrutor": "Luis Felipe",
  "valor": 299.90,
  "descricaoDetalhada": "Curso prático de ASP.NET Core com integração ao EF Core para construir aplicações web e APIs REST. Indicado a desenvolvedores iniciantes a intermediários que desejam criar backends em .NET. Cobre configuração do projeto, criação de endpoints REST, modelagem e persistência de dados com EF Core (CRUD, migrations) e boas práticas. Ao final, o aluno implementa uma API funcional com acesso a banco de dados.",
  "resumo": null,
  "imagemBytes": null
}


### PUT atualizar curso
PUT {{TreinaMaisHostAddress}}/api/courses/{{CourseId}}
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{Token}}


{
 "id": {{CourseId}},
 "nomeCurso": "Curso de ASP.NET Core Atualizado",
 "instrutor": "Luis Felipe",
 "valor": 349.90,
 "descricaoDetalhada": "Curso prático de ASP.NET Core com integração ao EF Core para construir aplicações web e APIs REST. Indicado a desenvolvedores iniciantes a intermediários que desejam criar backends em .NET. Cobre configuração do projeto, criação de endpoints REST, modelagem e persistência de dados com EF Core (CRUD, migrations) e boas práticas. Ao final, o aluno implementa uma API funcional com acesso a banco de dados.",
 "resumo": null,
 "imagemBytes": null
}


### DELETE curso
DELETE {{TreinaMaisHostAddress}}/api/courses/{{CourseId}}


### POST upload imagem para curso
POST {{TreinaMaisHostAddress}}/api/courses/{{CourseId}}/image
Content-Type: multipart/form-data; boundary=WebAppBoundary


--WebAppBoundary
Content-Disposition: form-data; name="file"; filename="imagem.jpg"
Content-Type: image/jpeg


< ./imagem.jpg
--WebAppBoundary--


### GET lista de reviews de um curso
GET {{TreinaMaisHostAddress}}/api/courses/{{CourseId}}/reviews
Accept: application/json


### GET review por ID
GET {{TreinaMaisHostAddress}}/api/courses/{{CourseId}}/reviews/{{ReviewId}}
Accept: application/json


### POST criar review
POST {{TreinaMaisHostAddress}}/api/courses/{{CourseId}}/reviews
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{Token}}


{
  "nota": 4.5,
  "descricao": "Curso excelente, muito bem explicado!"
}


### DELETE review
DELETE {{TreinaMaisHostAddress}}/api/courses/{{CourseId}}/reviews/{{ReviewId}}
Authorization: Bearer {{Token}}


### PATCH aprovar review
PATCH {{TreinaMaisHostAddress}}/api/courses/{{CourseId}}/reviews/{{ReviewId}}/approve
Accept: application/json


### PATCH rejeitar review
PATCH {{TreinaMaisHostAddress}}/api/courses/{{CourseId}}/reviews/{{ReviewId}}/reject?reason=profanity
Accept: application/json
